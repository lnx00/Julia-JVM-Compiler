//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/LNX/Documents/Rider/Coba-Projekt/Compiler/Parser/Grammar/Julia.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class JuliaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCTION_T=1, RETURN_T=2, BEGIN_T=3, END_T=4, IF_T=5, ELSE_T=6, WHILE_T=7, 
		INTEGER_T=8, FLOAT64_T=9, BOOL_T=10, STRING_T=11, LBRACE=12, RBRACE=13, 
		LPAREN=14, RPAREN=15, LBRACK=16, RBRACK=17, DCOLON=18, COMMA=19, SEMICOLON=20, 
		COLON=21, DOT=22, PLUS=23, MINUS=24, STAR=25, SLASH=26, PERCENT=27, EQEQ=28, 
		LT=29, GT=30, LTE=31, GTE=32, NEQ=33, AND=34, OR=35, NOT=36, EQ=37, INTCONST=38, 
		FLTCONST=39, STRCONST=40, BOOLCONST=41, IDENTIFIER=42, COMMENT=43, COMMENT_BLOCK=44, 
		WS=45, NL=46;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Letter", "Digit", "LetterOrDigit", "FUNCTION_T", "RETURN_T", "BEGIN_T", 
		"END_T", "IF_T", "ELSE_T", "WHILE_T", "INTEGER_T", "FLOAT64_T", "BOOL_T", 
		"STRING_T", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
		"DCOLON", "COMMA", "SEMICOLON", "COLON", "DOT", "PLUS", "MINUS", "STAR", 
		"SLASH", "PERCENT", "EQEQ", "LT", "GT", "LTE", "GTE", "NEQ", "AND", "OR", 
		"NOT", "EQ", "INTCONST", "FLTCONST", "STRCONST", "BOOLCONST", "IDENTIFIER", 
		"COMMENT", "COMMENT_BLOCK", "WS", "NL"
	};


	public JuliaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JuliaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'return'", "'begin'", "'end'", "'if'", "'else'", 
		"'while'", "'Integer'", "'Float64'", "'Bool'", "'String'", "'{'", "'}'", 
		"'('", "')'", "'['", "']'", "'::'", "','", "';'", "':'", "'.'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'=='", "'<'", "'>'", "'<='", "'>='", "'!='", 
		"'&&'", "'||'", "'!'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION_T", "RETURN_T", "BEGIN_T", "END_T", "IF_T", "ELSE_T", 
		"WHILE_T", "INTEGER_T", "FLOAT64_T", "BOOL_T", "STRING_T", "LBRACE", "RBRACE", 
		"LPAREN", "RPAREN", "LBRACK", "RBRACK", "DCOLON", "COMMA", "SEMICOLON", 
		"COLON", "DOT", "PLUS", "MINUS", "STAR", "SLASH", "PERCENT", "EQEQ", "LT", 
		"GT", "LTE", "GTE", "NEQ", "AND", "OR", "NOT", "EQ", "INTCONST", "FLTCONST", 
		"STRCONST", "BOOLCONST", "IDENTIFIER", "COMMENT", "COMMENT_BLOCK", "WS", 
		"NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Julia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JuliaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,46,320,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,
		0,1,1,1,1,1,2,1,2,3,2,106,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
		1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
		1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
		3,40,236,8,40,1,40,4,40,239,8,40,11,40,12,40,240,1,41,3,41,244,8,41,1,
		41,4,41,247,8,41,11,41,12,41,248,1,41,1,41,4,41,253,8,41,11,41,12,41,254,
		1,42,1,42,5,42,259,8,42,10,42,12,42,262,9,42,1,42,1,42,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,275,8,43,1,44,1,44,5,44,279,8,44,10,
		44,12,44,282,9,44,1,45,1,45,5,45,286,8,45,10,45,12,45,289,9,45,1,45,1,
		45,1,46,1,46,1,46,1,46,5,46,297,8,46,10,46,12,46,300,9,46,1,46,1,46,1,
		46,1,46,1,46,1,47,4,47,308,8,47,11,47,12,47,309,1,47,1,47,1,48,4,48,315,
		8,48,11,48,12,48,316,1,48,1,48,2,260,298,0,49,1,0,3,0,5,0,7,1,9,2,11,3,
		13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,
		39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,
		63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,38,83,39,85,40,
		87,41,89,42,91,43,93,44,95,45,97,46,1,0,4,2,0,65,90,97,122,1,0,48,57,2,
		0,10,10,13,13,3,0,9,10,13,13,32,32,329,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,
		1,0,0,0,3,101,1,0,0,0,5,105,1,0,0,0,7,107,1,0,0,0,9,116,1,0,0,0,11,123,
		1,0,0,0,13,129,1,0,0,0,15,133,1,0,0,0,17,136,1,0,0,0,19,141,1,0,0,0,21,
		147,1,0,0,0,23,155,1,0,0,0,25,163,1,0,0,0,27,168,1,0,0,0,29,175,1,0,0,
		0,31,177,1,0,0,0,33,179,1,0,0,0,35,181,1,0,0,0,37,183,1,0,0,0,39,185,1,
		0,0,0,41,187,1,0,0,0,43,190,1,0,0,0,45,192,1,0,0,0,47,194,1,0,0,0,49,196,
		1,0,0,0,51,198,1,0,0,0,53,200,1,0,0,0,55,202,1,0,0,0,57,204,1,0,0,0,59,
		206,1,0,0,0,61,208,1,0,0,0,63,211,1,0,0,0,65,213,1,0,0,0,67,215,1,0,0,
		0,69,218,1,0,0,0,71,221,1,0,0,0,73,224,1,0,0,0,75,227,1,0,0,0,77,230,1,
		0,0,0,79,232,1,0,0,0,81,235,1,0,0,0,83,243,1,0,0,0,85,256,1,0,0,0,87,274,
		1,0,0,0,89,276,1,0,0,0,91,283,1,0,0,0,93,292,1,0,0,0,95,307,1,0,0,0,97,
		314,1,0,0,0,99,100,7,0,0,0,100,2,1,0,0,0,101,102,7,1,0,0,102,4,1,0,0,0,
		103,106,3,1,0,0,104,106,3,3,1,0,105,103,1,0,0,0,105,104,1,0,0,0,106,6,
		1,0,0,0,107,108,5,102,0,0,108,109,5,117,0,0,109,110,5,110,0,0,110,111,
		5,99,0,0,111,112,5,116,0,0,112,113,5,105,0,0,113,114,5,111,0,0,114,115,
		5,110,0,0,115,8,1,0,0,0,116,117,5,114,0,0,117,118,5,101,0,0,118,119,5,
		116,0,0,119,120,5,117,0,0,120,121,5,114,0,0,121,122,5,110,0,0,122,10,1,
		0,0,0,123,124,5,98,0,0,124,125,5,101,0,0,125,126,5,103,0,0,126,127,5,105,
		0,0,127,128,5,110,0,0,128,12,1,0,0,0,129,130,5,101,0,0,130,131,5,110,0,
		0,131,132,5,100,0,0,132,14,1,0,0,0,133,134,5,105,0,0,134,135,5,102,0,0,
		135,16,1,0,0,0,136,137,5,101,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,
		140,5,101,0,0,140,18,1,0,0,0,141,142,5,119,0,0,142,143,5,104,0,0,143,144,
		5,105,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,20,1,0,0,0,147,148,5,
		73,0,0,148,149,5,110,0,0,149,150,5,116,0,0,150,151,5,101,0,0,151,152,5,
		103,0,0,152,153,5,101,0,0,153,154,5,114,0,0,154,22,1,0,0,0,155,156,5,70,
		0,0,156,157,5,108,0,0,157,158,5,111,0,0,158,159,5,97,0,0,159,160,5,116,
		0,0,160,161,5,54,0,0,161,162,5,52,0,0,162,24,1,0,0,0,163,164,5,66,0,0,
		164,165,5,111,0,0,165,166,5,111,0,0,166,167,5,108,0,0,167,26,1,0,0,0,168,
		169,5,83,0,0,169,170,5,116,0,0,170,171,5,114,0,0,171,172,5,105,0,0,172,
		173,5,110,0,0,173,174,5,103,0,0,174,28,1,0,0,0,175,176,5,123,0,0,176,30,
		1,0,0,0,177,178,5,125,0,0,178,32,1,0,0,0,179,180,5,40,0,0,180,34,1,0,0,
		0,181,182,5,41,0,0,182,36,1,0,0,0,183,184,5,91,0,0,184,38,1,0,0,0,185,
		186,5,93,0,0,186,40,1,0,0,0,187,188,5,58,0,0,188,189,5,58,0,0,189,42,1,
		0,0,0,190,191,5,44,0,0,191,44,1,0,0,0,192,193,5,59,0,0,193,46,1,0,0,0,
		194,195,5,58,0,0,195,48,1,0,0,0,196,197,5,46,0,0,197,50,1,0,0,0,198,199,
		5,43,0,0,199,52,1,0,0,0,200,201,5,45,0,0,201,54,1,0,0,0,202,203,5,42,0,
		0,203,56,1,0,0,0,204,205,5,47,0,0,205,58,1,0,0,0,206,207,5,37,0,0,207,
		60,1,0,0,0,208,209,5,61,0,0,209,210,5,61,0,0,210,62,1,0,0,0,211,212,5,
		60,0,0,212,64,1,0,0,0,213,214,5,62,0,0,214,66,1,0,0,0,215,216,5,60,0,0,
		216,217,5,61,0,0,217,68,1,0,0,0,218,219,5,62,0,0,219,220,5,61,0,0,220,
		70,1,0,0,0,221,222,5,33,0,0,222,223,5,61,0,0,223,72,1,0,0,0,224,225,5,
		38,0,0,225,226,5,38,0,0,226,74,1,0,0,0,227,228,5,124,0,0,228,229,5,124,
		0,0,229,76,1,0,0,0,230,231,5,33,0,0,231,78,1,0,0,0,232,233,5,61,0,0,233,
		80,1,0,0,0,234,236,3,53,26,0,235,234,1,0,0,0,235,236,1,0,0,0,236,238,1,
		0,0,0,237,239,7,1,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,
		240,241,1,0,0,0,241,82,1,0,0,0,242,244,3,53,26,0,243,242,1,0,0,0,243,244,
		1,0,0,0,244,246,1,0,0,0,245,247,7,1,0,0,246,245,1,0,0,0,247,248,1,0,0,
		0,248,246,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,252,3,49,24,0,251,
		253,7,1,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,
		0,0,0,255,84,1,0,0,0,256,260,5,34,0,0,257,259,9,0,0,0,258,257,1,0,0,0,
		259,262,1,0,0,0,260,261,1,0,0,0,260,258,1,0,0,0,261,263,1,0,0,0,262,260,
		1,0,0,0,263,264,5,34,0,0,264,86,1,0,0,0,265,266,5,116,0,0,266,267,5,114,
		0,0,267,268,5,117,0,0,268,275,5,101,0,0,269,270,5,102,0,0,270,271,5,97,
		0,0,271,272,5,108,0,0,272,273,5,115,0,0,273,275,5,101,0,0,274,265,1,0,
		0,0,274,269,1,0,0,0,275,88,1,0,0,0,276,280,3,1,0,0,277,279,3,5,2,0,278,
		277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,90,1,0,
		0,0,282,280,1,0,0,0,283,287,5,35,0,0,284,286,8,2,0,0,285,284,1,0,0,0,286,
		289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,
		0,0,0,290,291,6,45,0,0,291,92,1,0,0,0,292,293,5,35,0,0,293,294,5,61,0,
		0,294,298,1,0,0,0,295,297,9,0,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,
		299,1,0,0,0,298,296,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,
		61,0,0,302,303,5,35,0,0,303,304,1,0,0,0,304,305,6,46,0,0,305,94,1,0,0,
		0,306,308,7,3,0,0,307,306,1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,
		310,1,0,0,0,310,311,1,0,0,0,311,312,6,47,0,0,312,96,1,0,0,0,313,315,7,
		2,0,0,314,313,1,0,0,0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,
		317,318,1,0,0,0,318,319,6,48,0,0,319,98,1,0,0,0,14,0,105,235,240,243,248,
		254,260,274,280,287,298,309,316,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
