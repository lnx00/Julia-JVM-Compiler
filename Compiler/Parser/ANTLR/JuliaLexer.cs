//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/LNX/Documents/Rider/Coba-Projekt/Compiler/Parser/Grammar/Julia.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class JuliaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCTION_T=1, RETURN_T=2, BEGIN_T=3, END_T=4, IF_T=5, ELSE_T=6, WHILE_T=7, 
		INTEGER_T=8, FLOAT64_T=9, BOOL_T=10, STRING_T=11, LBRACE=12, RBRACE=13, 
		LPAREN=14, RPAREN=15, LBRACK=16, RBRACK=17, DCOLON=18, COMMA=19, SEMICOLON=20, 
		COLON=21, DOT=22, EQ=23, AMP=24, PIPE=25, PLUS=26, MINUS=27, STAR=28, 
		SLASH=29, PERCENT=30, AND=31, OR=32, NOT=33, EQEQ=34, LT=35, GT=36, LTE=37, 
		GTE=38, NEQ=39, INTCONST=40, FLTCONST=41, STRCONST=42, BOOLCONST=43, IDENTIFIER=44, 
		COMMENT=45, COMMENT_BLOCK=46, WS=47, NL=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Letter", "Digit", "LetterOrDigit", "FUNCTION_T", "RETURN_T", "BEGIN_T", 
		"END_T", "IF_T", "ELSE_T", "WHILE_T", "INTEGER_T", "FLOAT64_T", "BOOL_T", 
		"STRING_T", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
		"DCOLON", "COMMA", "SEMICOLON", "COLON", "DOT", "EQ", "AMP", "PIPE", "PLUS", 
		"MINUS", "STAR", "SLASH", "PERCENT", "AND", "OR", "NOT", "EQEQ", "LT", 
		"GT", "LTE", "GTE", "NEQ", "INTCONST", "FLTCONST", "STRCONST", "BOOLCONST", 
		"IDENTIFIER", "COMMENT", "COMMENT_BLOCK", "WS", "NL"
	};


	public JuliaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JuliaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'return'", "'begin'", "'end'", "'if'", "'else'", 
		"'while'", "'Integer'", "'Float64'", "'Bool'", "'String'", "'{'", "'}'", 
		"'('", "')'", "'['", "']'", "'::'", "','", "';'", "':'", "'.'", "'='", 
		"'&'", "'|'", "'+'", "'-'", "'*'", "'/'", "'%'", null, null, "'!'", null, 
		"'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION_T", "RETURN_T", "BEGIN_T", "END_T", "IF_T", "ELSE_T", 
		"WHILE_T", "INTEGER_T", "FLOAT64_T", "BOOL_T", "STRING_T", "LBRACE", "RBRACE", 
		"LPAREN", "RPAREN", "LBRACK", "RBRACK", "DCOLON", "COMMA", "SEMICOLON", 
		"COLON", "DOT", "EQ", "AMP", "PIPE", "PLUS", "MINUS", "STAR", "SLASH", 
		"PERCENT", "AND", "OR", "NOT", "EQEQ", "LT", "GT", "LTE", "GTE", "NEQ", 
		"INTCONST", "FLTCONST", "STRCONST", "BOOLCONST", "IDENTIFIER", "COMMENT", 
		"COMMENT_BLOCK", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Julia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JuliaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,1,1,1,1,2,1,2,3,2,110,8,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
		1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,
		1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
		1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,3,42,244,8,42,1,42,4,42,247,8,
		42,11,42,12,42,248,1,43,3,43,252,8,43,1,43,4,43,255,8,43,11,43,12,43,256,
		1,43,1,43,4,43,261,8,43,11,43,12,43,262,1,44,1,44,5,44,267,8,44,10,44,
		12,44,270,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
		3,45,283,8,45,1,46,1,46,5,46,287,8,46,10,46,12,46,290,9,46,1,47,1,47,5,
		47,294,8,47,10,47,12,47,297,9,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,305,
		8,48,10,48,12,48,308,9,48,1,48,1,48,1,48,1,48,1,48,1,49,4,49,316,8,49,
		11,49,12,49,317,1,49,1,49,1,50,4,50,323,8,50,11,50,12,50,324,1,50,1,50,
		2,268,306,0,51,1,0,3,0,5,0,7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,
		25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,47,21,
		49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,
		73,34,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,91,43,93,44,95,45,
		97,46,99,47,101,48,1,0,4,2,0,65,90,97,122,1,0,48,57,2,0,10,10,13,13,3,
		0,9,10,13,13,32,32,337,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
		0,0,1,103,1,0,0,0,3,105,1,0,0,0,5,109,1,0,0,0,7,111,1,0,0,0,9,120,1,0,
		0,0,11,127,1,0,0,0,13,133,1,0,0,0,15,137,1,0,0,0,17,140,1,0,0,0,19,145,
		1,0,0,0,21,151,1,0,0,0,23,159,1,0,0,0,25,167,1,0,0,0,27,172,1,0,0,0,29,
		179,1,0,0,0,31,181,1,0,0,0,33,183,1,0,0,0,35,185,1,0,0,0,37,187,1,0,0,
		0,39,189,1,0,0,0,41,191,1,0,0,0,43,194,1,0,0,0,45,196,1,0,0,0,47,198,1,
		0,0,0,49,200,1,0,0,0,51,202,1,0,0,0,53,204,1,0,0,0,55,206,1,0,0,0,57,208,
		1,0,0,0,59,210,1,0,0,0,61,212,1,0,0,0,63,214,1,0,0,0,65,216,1,0,0,0,67,
		218,1,0,0,0,69,221,1,0,0,0,71,224,1,0,0,0,73,226,1,0,0,0,75,229,1,0,0,
		0,77,231,1,0,0,0,79,233,1,0,0,0,81,236,1,0,0,0,83,239,1,0,0,0,85,243,1,
		0,0,0,87,251,1,0,0,0,89,264,1,0,0,0,91,282,1,0,0,0,93,284,1,0,0,0,95,291,
		1,0,0,0,97,300,1,0,0,0,99,315,1,0,0,0,101,322,1,0,0,0,103,104,7,0,0,0,
		104,2,1,0,0,0,105,106,7,1,0,0,106,4,1,0,0,0,107,110,3,1,0,0,108,110,3,
		3,1,0,109,107,1,0,0,0,109,108,1,0,0,0,110,6,1,0,0,0,111,112,5,102,0,0,
		112,113,5,117,0,0,113,114,5,110,0,0,114,115,5,99,0,0,115,116,5,116,0,0,
		116,117,5,105,0,0,117,118,5,111,0,0,118,119,5,110,0,0,119,8,1,0,0,0,120,
		121,5,114,0,0,121,122,5,101,0,0,122,123,5,116,0,0,123,124,5,117,0,0,124,
		125,5,114,0,0,125,126,5,110,0,0,126,10,1,0,0,0,127,128,5,98,0,0,128,129,
		5,101,0,0,129,130,5,103,0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,12,
		1,0,0,0,133,134,5,101,0,0,134,135,5,110,0,0,135,136,5,100,0,0,136,14,1,
		0,0,0,137,138,5,105,0,0,138,139,5,102,0,0,139,16,1,0,0,0,140,141,5,101,
		0,0,141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,18,1,0,0,
		0,145,146,5,119,0,0,146,147,5,104,0,0,147,148,5,105,0,0,148,149,5,108,
		0,0,149,150,5,101,0,0,150,20,1,0,0,0,151,152,5,73,0,0,152,153,5,110,0,
		0,153,154,5,116,0,0,154,155,5,101,0,0,155,156,5,103,0,0,156,157,5,101,
		0,0,157,158,5,114,0,0,158,22,1,0,0,0,159,160,5,70,0,0,160,161,5,108,0,
		0,161,162,5,111,0,0,162,163,5,97,0,0,163,164,5,116,0,0,164,165,5,54,0,
		0,165,166,5,52,0,0,166,24,1,0,0,0,167,168,5,66,0,0,168,169,5,111,0,0,169,
		170,5,111,0,0,170,171,5,108,0,0,171,26,1,0,0,0,172,173,5,83,0,0,173,174,
		5,116,0,0,174,175,5,114,0,0,175,176,5,105,0,0,176,177,5,110,0,0,177,178,
		5,103,0,0,178,28,1,0,0,0,179,180,5,123,0,0,180,30,1,0,0,0,181,182,5,125,
		0,0,182,32,1,0,0,0,183,184,5,40,0,0,184,34,1,0,0,0,185,186,5,41,0,0,186,
		36,1,0,0,0,187,188,5,91,0,0,188,38,1,0,0,0,189,190,5,93,0,0,190,40,1,0,
		0,0,191,192,5,58,0,0,192,193,5,58,0,0,193,42,1,0,0,0,194,195,5,44,0,0,
		195,44,1,0,0,0,196,197,5,59,0,0,197,46,1,0,0,0,198,199,5,58,0,0,199,48,
		1,0,0,0,200,201,5,46,0,0,201,50,1,0,0,0,202,203,5,61,0,0,203,52,1,0,0,
		0,204,205,5,38,0,0,205,54,1,0,0,0,206,207,5,124,0,0,207,56,1,0,0,0,208,
		209,5,43,0,0,209,58,1,0,0,0,210,211,5,45,0,0,211,60,1,0,0,0,212,213,5,
		42,0,0,213,62,1,0,0,0,214,215,5,47,0,0,215,64,1,0,0,0,216,217,5,37,0,0,
		217,66,1,0,0,0,218,219,3,53,26,0,219,220,3,53,26,0,220,68,1,0,0,0,221,
		222,3,55,27,0,222,223,3,55,27,0,223,70,1,0,0,0,224,225,5,33,0,0,225,72,
		1,0,0,0,226,227,3,51,25,0,227,228,3,51,25,0,228,74,1,0,0,0,229,230,5,60,
		0,0,230,76,1,0,0,0,231,232,5,62,0,0,232,78,1,0,0,0,233,234,3,75,37,0,234,
		235,3,51,25,0,235,80,1,0,0,0,236,237,3,77,38,0,237,238,3,51,25,0,238,82,
		1,0,0,0,239,240,3,71,35,0,240,241,3,51,25,0,241,84,1,0,0,0,242,244,3,59,
		29,0,243,242,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,247,7,1,0,0,246,
		245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,86,1,0,
		0,0,250,252,3,59,29,0,251,250,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,
		253,255,7,1,0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,
		1,0,0,0,257,258,1,0,0,0,258,260,3,49,24,0,259,261,7,1,0,0,260,259,1,0,
		0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,88,1,0,0,0,264,
		268,5,34,0,0,265,267,9,0,0,0,266,265,1,0,0,0,267,270,1,0,0,0,268,269,1,
		0,0,0,268,266,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,272,5,34,0,0,
		272,90,1,0,0,0,273,274,5,116,0,0,274,275,5,114,0,0,275,276,5,117,0,0,276,
		283,5,101,0,0,277,278,5,102,0,0,278,279,5,97,0,0,279,280,5,108,0,0,280,
		281,5,115,0,0,281,283,5,101,0,0,282,273,1,0,0,0,282,277,1,0,0,0,283,92,
		1,0,0,0,284,288,3,1,0,0,285,287,3,5,2,0,286,285,1,0,0,0,287,290,1,0,0,
		0,288,286,1,0,0,0,288,289,1,0,0,0,289,94,1,0,0,0,290,288,1,0,0,0,291,295,
		5,35,0,0,292,294,8,2,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,
		0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,6,47,0,0,299,
		96,1,0,0,0,300,301,5,35,0,0,301,302,5,61,0,0,302,306,1,0,0,0,303,305,9,
		0,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,307,1,0,0,0,306,304,1,0,0,0,
		307,309,1,0,0,0,308,306,1,0,0,0,309,310,5,61,0,0,310,311,5,35,0,0,311,
		312,1,0,0,0,312,313,6,48,0,0,313,98,1,0,0,0,314,316,7,3,0,0,315,314,1,
		0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,
		319,320,6,49,0,0,320,100,1,0,0,0,321,323,7,2,0,0,322,321,1,0,0,0,323,324,
		1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,6,50,0,
		0,327,102,1,0,0,0,14,0,109,243,248,251,256,262,268,282,288,295,306,317,
		324,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
